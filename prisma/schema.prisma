// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_UNPOOLED")
}

model game {
  roomId           String        @id @default(cuid())
  winner           String?       @default("none")
  players          player[]
  board            String
  currentPlayer    String
  kingCheckOrMoved String
  rookMoved        String
  eliminatedPiece  String
  isKingInCheck    String        @default("noCheck")
  canPawnPromote   String
  createdAt        DateTime      @default(now())
  whiteTime        Int           @default(600)
  blackTime        Int           @default(600)
  lastMove         String?
  messages         ChatMessage[]
}

model player {
  id          String  @id
  drawRequest Boolean @default(false)
  color       String
  name        String?
  gameId      String
  game        game    @relation(fields: [gameId], references: [roomId])
}

model ChatMessage {
  id        String   @id @default(cuid())
  content   String   @db.VarChar(500)
  userId    String   @db.VarChar(100)
  userName  String   @db.VarChar(100)
  roomId    String
  game      game     @relation(fields: [roomId], references: [roomId], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@index([roomId])
  @@index([createdAt])
}

model stats {
  id            String @id @default(cuid())
  draws         Int    @default(0)
  totalGames    Int    @default(0)
  currentOnline Int    @default(0)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}
